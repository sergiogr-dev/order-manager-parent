server:
  port: 8080 # Puerto donde el API Gateway escuchará las peticiones.
spring: # Bloque de configuración de Spring.
  application:
    name: api-gateway # Nombre de la aplicación, usado para registrarse en Eureka.
  cloud: # Configuración específica de Spring Cloud.
    gateway: # Configuración de Spring Cloud Gateway.
      server:
        webflux:
          discovery:
            locator:
              enabled: true
              lower-case-service-id: true
          default-filters:
            - SaveSession
            - TokenRelay
          routes:
            - id: order-service # ID único de la ruta.
              uri: lb://order-service # URI de destino. "lb://" indica balanceo de carga con Eureka para el servicio "order-service".
              predicates: # Condiciones para que una petición coincida con esta ruta.
                - Path=/api/v1/orders/** # Si la URL de la petición empieza con "/orders/", se enruta a "order-service".
            - id: product-service # ID único de la ruta.
              uri: lb://product-service # URI de destino para el servicio "product-service".
              predicates:
                - Path=/api/v1/products/** # Si la URL de la petición empieza con "/products/", se enruta a "product-service".
            - id: inventory-service # ID único de la ruta.
              uri: lb://inventory-service # URI de destino para el servicio "inventory-service".
              predicates:
                - Path=/api/v1/inventory/** # Si la URL de la petición empieza con "/inventory/", se enruta a "inventory-service".
            - id: eureka-server
              uri: http://localhost:8761
              predicates:
                - Path=/eureka/web
              filters:
                - SetPath=/
            - id: eureka-server-static
              uri: http://localhost:8761
              predicates:
                - Path=/eureka/**
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_SERVER:http://localhost:8181/realms/microservices-realm}
        registration:
          api-gateway: # Nombre con el que se registra el cliente en el gateway
            provider: ${KC_PROVIDER:keycloak}
            scope:
              - openid
            client-id: ${KC_CLIENT_ID:api-gateway}
            client-secret: ${KC_CLIENT_SECRET:KwBDlTjq25ukor7huGFG7itzFXNwQdPR}
            authorization-grant-type: ${$KC_AUTH_GRANT_TYPE:authorization_code}
            redirect-uri: ${baseUrl:http://localhost:8080}/login/oauth2/code/keycloak
      resourceserver:
        jwt:
          # URL que proporciona el conjunto de claves públicas que Keycloak utiliza para verificar la firma de los tokens JWT emitidos
          jwk-set-uri: "http://localhost:8181/realms/order-manager-realm/protocol/openid-connect/certs" # jwks: (JSON Web Key Set)
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka # URL de tu servidor Eureka (asegúrate de que este corriendo)
#      defaultZone: http://${EUREKA_USER:eureka}:${EUREKA_PASSWORD:password}@localhost:8761/eureka # URL de tu servidor Eureka (asegúrate de que est? corriendo)
    fetch-registry: true # Indica al Gateway que recupere el registro de servicios
    register-with-eureka: true # El Gateway también se registra en Eureka (útil para monitoreo)
  instance:
    hostname: localhost # Nombre del host de esta instancia de Gateway
    prefer-ip-address: true # Preferir la IP en lugar del hostname si tienes problemas de resolución DNS
    # ip-address: 192.168.1.100 # Si quieres una IP específica
